# **what it does ?**
# Take the given commit, run unit tests specifically on that sha, build and
# package it, and then release to GitHub

# **why it does ?**
# Ensure an automated and tested release process

# **when it does ?**
# This will only run manually with a given sha and version

name: Release new version

on:
  workflow_dispatch:
    inputs:
      sha:
       description: 'The last commit sha in the release'
       required: true
      version_number:
       description: 'The release version number (i.e. 1.0.0, 0.0.1-alpha)'
       required: true

permissions:
  contents: write # permission to allow creating a new release

env:
  # Change CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release


defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.sha }}

      - name: Authenticate GitHub CLI
        run: gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download LLVM
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            curl -L -o llvm-linux.tar.gz https://github.com/SwirlLang/llvm-builds/releases/download/20.1.8/LLVM-20.1.8-linux-x86_64-gcc.tar.gz 
            mkdir -p $HOME/llvm
            tar -xzf llvm-linux.tar.gz -C $HOME/llvm
            # set PATH for llvm tools
            echo "LLVM_DIR=$HOME/llvm/lib/cmake/llvm" >> $GITHUB_ENV
          fi
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            curl -L -o llvm-windows.rar https://github.com/SwirlLang/llvm-builds/releases/download/20.1.8/LLVM-20.1.8-windows-x86_64-msvc.rar
            7z x llvm-windows.rar -o$HOME/llvm
            # set PATH for llvm tools
            echo "LLVM_DIR=$HOME/llvm/lib/cmake/llvm" >> $GITHUB_ENV
          fi

      - name: Install dependencies and Configure CMake
        run: |
            if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
                cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -S . -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14
            fi
            if [ "${{ matrix.os }}" == "windows-latest" ]; then
              cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -S . -G "Visual Studio 17 2022" -A x64
            fi

      - name: Build
        run: cmake --build build --config ${{env.BUILD_TYPE}} -j 14

      - name: Package with CPack
        run: |
            cd build
            if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
              cpack -G DEB
              cpack -G RPM
            elif [ "${{ matrix.os }}" == "windows-latest" ]; then
              cpack -G NSIS
            fi
            cd ..


      - name: rename and run the app
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            mv build/${{env.BUILD_TYPE}}/swirl.exe build/swirl-windows.exe
            ./build/swirl-windows.exe
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            mv build/swirl build/swirl-linux
            ./build/swirl-linux
          fi

      - name: Upload binaries and packages
        uses: actions/upload-artifact@v4
        with:
          name: binary
          path: build/swirl-*

  github-release:
    name: GitHub Release

    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Create Tag
        run: |
          git tag v${{ github.event.inputs.version_number }} ${{ github.event.inputs.sha }}
          git push origin v${{ github.event.inputs.version_number }}
      
      - uses: actions/download-artifact@v5
        with:
          name: binary
          path: .

      - name: Generate release notes
        run: npx git-cliff@latest --unreleased --tag ${{github.event.inputs.version_number}} --output CHANGELOG.md

      - name: Creating GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{github.event.inputs.version_number}}
          tag_name: v${{github.event.inputs.version_number}}
          target_commitish: ${{github.event.inputs.sha}}
          body_path: CHANGELOG.md
          files: |
            swirl-*
